[{"D:\\project-form\\projectForm\\src\\index.js":"1","D:\\project-form\\projectForm\\src\\App.js":"2","D:\\project-form\\projectForm\\src\\components\\SimpleInput.js":"3","D:\\project-form\\projectForm\\src\\components\\BasicForm.js":"4","D:\\project-form\\projectForm\\src\\hooks\\use-input.js":"5","D:\\project-form\\projectForm\\src\\pages\\result.js":"6","D:\\project-form\\projectForm\\src\\gql\\link.js":"7"},{"size":501,"mtime":1623590908506,"results":"8","hashOfConfig":"9"},{"size":600,"mtime":1623481689427,"results":"10","hashOfConfig":"9"},{"size":2709,"mtime":1623421805454,"results":"11","hashOfConfig":"9"},{"size":3646,"mtime":1623480861098,"results":"12","hashOfConfig":"9"},{"size":721,"mtime":1623422368120,"results":"13","hashOfConfig":"9"},{"size":6838,"mtime":1623590680965,"results":"14","hashOfConfig":"9"},{"size":957,"mtime":1623590960666,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vqf6gj",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\project-form\\projectForm\\src\\index.js",[],"D:\\project-form\\projectForm\\src\\App.js",[],["33","34"],"D:\\project-form\\projectForm\\src\\components\\SimpleInput.js",[],"D:\\project-form\\projectForm\\src\\components\\BasicForm.js",["35"],"import {gql, useMutation} from '@apollo/client';\nimport useInput from '../hooks/use-input';\n\nconst isNotEmpty = (value) => value.trim() !== '';\nconst isEmail = (value) => value.includes('@');\n\nconst registerUser = gql`\n  mutation RegisterUser(\n    $first_name: String!\n    $last_name: String!\n    $email: String!\n  ) {\n    registerUser(\n      user: {first_name: $first_name, last_name: $last_name, email: $email}\n    )\n  }\n`;\n\nconst BasicForm = (props) => {\n  const [register_User, {data}] = useMutation(registerUser);\n\n  const {\n    value: firstNameValue,\n    isValid: firstNameIsValid,\n    hasError: firstNameHasError,\n    valueChangeHandler: firstNameChangeHandler,\n    inputBlurHandler: firstNameBlurHandler,\n    reset: resetFirstName,\n  } = useInput(isNotEmpty);\n  const {\n    value: lastNameValue,\n    isValid: lastNameIsValid,\n    hasError: lastNameHasError,\n    valueChangeHandler: lastNameChangeHandler,\n    inputBlurHandler: lastNameBlurHandler,\n    reset: resetLastName,\n  } = useInput(isNotEmpty);\n  const {\n    value: emailValue,\n    isValid: emailIsValid,\n    hasError: emailHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmail,\n  } = useInput(isEmail);\n\n  let formIsValid = false;\n\n  if (firstNameIsValid && lastNameIsValid && emailIsValid) {\n    formIsValid = true;\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    register_User({\n      variables: {\n        first_name: firstNameValue,\n        last_name: lastNameValue,\n        email: emailValue,\n      },\n    })\n      .then((val) => {\n        console.log(val);\n      })\n      .catch((e) => {\n        console.log(e.message);\n      });\n    if (!formIsValid) {\n      return;\n    }\n    console.log('Submitted!');\n    console.log(firstNameValue, lastNameValue, emailValue);\n\n    resetFirstName();\n    resetLastName();\n    resetEmail();\n  };\n\n  const firstNameClasses = firstNameHasError\n    ? 'form-control invalid'\n    : 'form-control';\n  const lastNameClasses = lastNameHasError\n    ? 'form-control invalid'\n    : 'form-control';\n  const emailClasses = emailHasError ? 'form-control invalid' : 'form-control';\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"control-group\">\n        <div className={firstNameClasses}>\n          <label htmlFor=\"name\">First Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={firstNameValue}\n            onChange={firstNameChangeHandler}\n            onBlur={firstNameBlurHandler}\n          />\n          {firstNameHasError && (\n            <p className=\"error-text\">Please enter a first name.</p>\n          )}\n        </div>\n        <div className={lastNameClasses}>\n          <label htmlFor=\"name\">Last Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={lastNameValue}\n            onChange={lastNameChangeHandler}\n            onBlur={lastNameBlurHandler}\n          />\n          {lastNameHasError && (\n            <p className=\"error-text\">Please enter a last name.</p>\n          )}\n        </div>\n      </div>\n      <div className={emailClasses}>\n        <label htmlFor=\"name\">E-Mail Address</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={emailValue}\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n        />\n        {emailHasError && (\n          <p className=\"error-text\">Please enter a valid email address.</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n","D:\\project-form\\projectForm\\src\\hooks\\use-input.js",[],"D:\\project-form\\projectForm\\src\\pages\\result.js",["36"],"import React from 'react';\r\nimport {gql, useMutation, useQuery, useSubscription} from '@apollo/client';\r\nimport {\r\n  makeStyles,\r\n  createMuiTheme,\r\n  ThemeProvider,\r\n  Checkbox,\r\n  Button,\r\n  CircularProgress,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {blue} from '@material-ui/core/colors';\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nconst newUserRegistration = gql`\r\n  subscription {\r\n    newUserRegistration {\r\n      first_name\r\n      last_name\r\n      id\r\n      createdAt\r\n      email\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRegisterdUsers = gql`\r\n  query {\r\n    getRegistration {\r\n      first_name\r\n      last_name\r\n      email\r\n      createdAt\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst deleteRegisterdUsers = gql`\r\n  mutation {\r\n    removeAllUsers\r\n  }\r\n`;\r\n\r\nconst removeSelectedUsers = gql`\r\n  mutation removeUser($ids: [Int]!) {\r\n    removeUser(ids: $ids)\r\n  }\r\n`;\r\n\r\nexport default function ResultPage() {\r\n  const {data, loading, error, refetch} = useQuery(getAllRegisterdUsers);\r\n  const [registeredUsers, setRegisteredUsers] = React.useState([]);\r\n  const subscription = useSubscription(newUserRegistration);\r\n\r\n  React.useEffect(() => {\r\n    console.log('i am here');\r\n    console.log(subscription.data);\r\n    if (subscription.data) {\r\n      setRegisteredUsers((users) => [\r\n        ...users,\r\n        subscription.data.newUserRegistration,\r\n      ]);\r\n    }\r\n  }, [subscription.data]);\r\n\r\n  React.useEffect(() => {\r\n    if (!loading && !error) {\r\n      setRegisteredUsers(data.getRegistration);\r\n    }\r\n  }, [data, loading, error]);\r\n\r\n  const classes = useStyles();\r\n  const [allChecked, setAllChecked] = React.useState(false);\r\n  const [selectedUser, setSelectedUsers] = React.useState({});\r\n  const [isDeleting, setIsDeleting] = React.useState(false);\r\n  const [deleteUsers] = useMutation(deleteRegisterdUsers);\r\n  const [deleteSelectedUsers] = useMutation(removeSelectedUsers);\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      type: 'dark',\r\n      primary: {\r\n        main: blue[500],\r\n      },\r\n    },\r\n    typography: {\r\n      fontFamily: 'poppins',\r\n    },\r\n  });\r\n  return loading ? (\r\n    <h1>loading...</h1>\r\n  ) : error ? (\r\n    <Typography>There's Some Error</Typography>\r\n  ) : (\r\n    <ThemeProvider theme={theme}>\r\n      <>\r\n        <TableContainer component={Paper}>\r\n          <Table className={classes.table} aria-label=\"simple table\">\r\n            <TableHead>\r\n              {(allChecked ||\r\n                Object.keys(selectedUser).filter((val) => selectedUser[val])\r\n                  .length > 0) && (\r\n                <Button\r\n                  onClick={() => {\r\n                    setIsDeleting(true);\r\n                    if (allChecked && !isDeleting) {\r\n                      deleteUsers()\r\n                        .then(() => {\r\n                          setRegisteredUsers([]);\r\n                        })\r\n                        .finally(() => {\r\n                          setAllChecked(false);\r\n                          setIsDeleting(false);\r\n                        });\r\n                    } else if (!isDeleting) {\r\n                      deleteSelectedUsers({\r\n                        variables: {\r\n                          ids: Object.keys(selectedUser)\r\n                            .filter((val) => selectedUser[val])\r\n                            .map((val) => parseInt(val)),\r\n                        },\r\n                      })\r\n                        .then(() => {\r\n                          setRegisteredUsers((users) => {\r\n                            return users.filter(\r\n                              (user) => !selectedUser[user.id]\r\n                            );\r\n                          });\r\n                        })\r\n                        .finally(() => {\r\n                          setIsDeleting(false);\r\n                          setSelectedUsers({});\r\n                        });\r\n                    }\r\n                  }}\r\n                >\r\n                  {isDeleting ? (\r\n                    <CircularProgress style={{height: 30, width: 30}} />\r\n                  ) : (\r\n                    'Delete'\r\n                  )}\r\n                </Button>\r\n              )}\r\n              <TableRow>\r\n                <TableCell>\r\n                  <Checkbox\r\n                    checked={allChecked}\r\n                    onChange={(e, checked) => setAllChecked(checked)}\r\n                    color=\"primary\"\r\n                    disabled={registeredUsers.length < 1}\r\n                  />\r\n                </TableCell>\r\n                <TableCell>Id</TableCell>\r\n                <TableCell align=\"left\">First_Name</TableCell>\r\n                <TableCell align=\"left\">Last_Name</TableCell>\r\n                <TableCell align=\"left\">Email</TableCell>\r\n                <TableCell align=\"left\">Registered At</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {registeredUsers.map((row, i) => (\r\n                <TableRow key={row.name}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    <Checkbox\r\n                      checked={allChecked || selectedUser[row.id]}\r\n                      onChange={(e, checked) => {\r\n                        setSelectedUsers((val) => ({\r\n                          ...val,\r\n                          [row.id]: checked,\r\n                        }));\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {i + 1}\r\n                    {/* {row.id} */}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">{row.first_name}</TableCell>\r\n                  <TableCell align=\"left\">{row.last_name}</TableCell>\r\n                  <TableCell align=\"left\">{row.email}</TableCell>\r\n                  <TableCell align=\"left\">\r\n                    {new Date(parseFloat(row.createdAt))\r\n                      .toUTCString()\r\n                      .replace('GMT', '')}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <div style={{width: '100%', height: '100%', marginTop: 30}}>\r\n          <video\r\n            src=\"/videos/final_page.mp4\"\r\n            style={{width: '100%', height: '100%'}}\r\n            autoPlay\r\n            controls\r\n          ></video>\r\n        </div>\r\n      </>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\project-form\\projectForm\\src\\gql\\link.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":20,"column":26,"nodeType":"43","messageId":"44","endLine":20,"endColumn":30},{"ruleId":"41","severity":1,"message":"45","line":63,"column":32,"nodeType":"43","messageId":"44","endLine":63,"endColumn":39},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'refetch' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]