[{"D:\\project-form\\projectForm\\src\\index.js":"1","D:\\project-form\\projectForm\\src\\App.js":"2","D:\\project-form\\projectForm\\src\\components\\BasicForm.js":"3","D:\\project-form\\projectForm\\src\\hooks\\use-input.js":"4","D:\\project-form\\projectForm\\src\\pages\\result.js":"5","D:\\project-form\\projectForm\\src\\gql\\link.js":"6"},{"size":501,"mtime":1623612225881,"results":"7","hashOfConfig":"8"},{"size":517,"mtime":1623612450569,"results":"9","hashOfConfig":"8"},{"size":3646,"mtime":1623480861098,"results":"10","hashOfConfig":"8"},{"size":721,"mtime":1623422368120,"results":"11","hashOfConfig":"8"},{"size":8676,"mtime":1623617117122,"results":"12","hashOfConfig":"8"},{"size":957,"mtime":1623590960666,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1vqf6gj",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"D:\\project-form\\projectForm\\src\\index.js",[],["28","29"],"D:\\project-form\\projectForm\\src\\App.js",[],"D:\\project-form\\projectForm\\src\\components\\BasicForm.js",["30"],"import {gql, useMutation} from '@apollo/client';\nimport useInput from '../hooks/use-input';\n\nconst isNotEmpty = (value) => value.trim() !== '';\nconst isEmail = (value) => value.includes('@');\n\nconst registerUser = gql`\n  mutation RegisterUser(\n    $first_name: String!\n    $last_name: String!\n    $email: String!\n  ) {\n    registerUser(\n      user: {first_name: $first_name, last_name: $last_name, email: $email}\n    )\n  }\n`;\n\nconst BasicForm = (props) => {\n  const [register_User, {data}] = useMutation(registerUser);\n\n  const {\n    value: firstNameValue,\n    isValid: firstNameIsValid,\n    hasError: firstNameHasError,\n    valueChangeHandler: firstNameChangeHandler,\n    inputBlurHandler: firstNameBlurHandler,\n    reset: resetFirstName,\n  } = useInput(isNotEmpty);\n  const {\n    value: lastNameValue,\n    isValid: lastNameIsValid,\n    hasError: lastNameHasError,\n    valueChangeHandler: lastNameChangeHandler,\n    inputBlurHandler: lastNameBlurHandler,\n    reset: resetLastName,\n  } = useInput(isNotEmpty);\n  const {\n    value: emailValue,\n    isValid: emailIsValid,\n    hasError: emailHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmail,\n  } = useInput(isEmail);\n\n  let formIsValid = false;\n\n  if (firstNameIsValid && lastNameIsValid && emailIsValid) {\n    formIsValid = true;\n  }\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    register_User({\n      variables: {\n        first_name: firstNameValue,\n        last_name: lastNameValue,\n        email: emailValue,\n      },\n    })\n      .then((val) => {\n        console.log(val);\n      })\n      .catch((e) => {\n        console.log(e.message);\n      });\n    if (!formIsValid) {\n      return;\n    }\n    console.log('Submitted!');\n    console.log(firstNameValue, lastNameValue, emailValue);\n\n    resetFirstName();\n    resetLastName();\n    resetEmail();\n  };\n\n  const firstNameClasses = firstNameHasError\n    ? 'form-control invalid'\n    : 'form-control';\n  const lastNameClasses = lastNameHasError\n    ? 'form-control invalid'\n    : 'form-control';\n  const emailClasses = emailHasError ? 'form-control invalid' : 'form-control';\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"control-group\">\n        <div className={firstNameClasses}>\n          <label htmlFor=\"name\">First Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={firstNameValue}\n            onChange={firstNameChangeHandler}\n            onBlur={firstNameBlurHandler}\n          />\n          {firstNameHasError && (\n            <p className=\"error-text\">Please enter a first name.</p>\n          )}\n        </div>\n        <div className={lastNameClasses}>\n          <label htmlFor=\"name\">Last Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={lastNameValue}\n            onChange={lastNameChangeHandler}\n            onBlur={lastNameBlurHandler}\n          />\n          {lastNameHasError && (\n            <p className=\"error-text\">Please enter a last name.</p>\n          )}\n        </div>\n      </div>\n      <div className={emailClasses}>\n        <label htmlFor=\"name\">E-Mail Address</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={emailValue}\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n        />\n        {emailHasError && (\n          <p className=\"error-text\">Please enter a valid email address.</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n","D:\\project-form\\projectForm\\src\\hooks\\use-input.js",[],"D:\\project-form\\projectForm\\src\\pages\\result.js",["31","32"],"D:\\project-form\\projectForm\\src\\gql\\link.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":20,"column":26,"nodeType":"39","messageId":"40","endLine":20,"endColumn":30},{"ruleId":"37","severity":1,"message":"41","line":69,"column":32,"nodeType":"39","messageId":"40","endLine":69,"endColumn":39},{"ruleId":"42","severity":1,"message":"43","line":117,"column":6,"nodeType":"44","endLine":117,"endColumn":24,"suggestions":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'refetch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has an unnecessary dependency: 'videoRef.current'. Either exclude it or remove the dependency array. Mutable values like 'videoRef.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["48"],"no-global-assign","no-unsafe-negation",{"desc":"49","fix":"50"},"Update the dependencies array to be: []",{"range":"51","text":"52"},[3253,3271],"[]"]